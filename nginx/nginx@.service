[Unit]
Description=nginx load balancer aka reverse proxy %m %H:%i 

Requires=docker.service
Requires=etcd.service
#Requires=confd@*.service

After=docker.service
After=etcd.service
#After=confd@*.service

# To reduce edit mistakes force nginx and confd to run on *.105 
# TODO: ConditionHost=core-05

[Service]
# From: https://www.digitalocean.com/community/tutorials/how-to-create-flexible-services-for-a-coreos-cluster-with-fleet-unit-files
# Change killmode from "control-group" to "none" to let Docker remove
# work correctly.
KillMode=none

# Allow access to COREOS_PUBLIC_IPV4 and CORESOS_PRIVATE_IPV4 amongst other variables
EnvironmentFile=/etc/environment
EnvironmentFile=/home/core/share/adNimbusEnvironment

# Pulling the container the first time can take more than the default 90secs. Set to 0 for no timeout
TimeoutStartSec=0

# TODO: Is there a performance startup improvement if we use stop and don't remove the container

ExecStartPre=-/usr/bin/docker rm -f ${nginxDockerTag}
ExecStartPre=-/usr/bin/docker ps -a
ExecStartPre=/usr/bin/docker pull ${DOCKER_REGISTRY}/${nginxService}:${nginxDockerTag}

ExecStart=/usr/bin/docker run --name=${nginxDockerTag} --rm=true -v /var/run/docker.sock:/var/run/docker.sock -v /home/core/share/${nginxService}:${nginxDir} -p ${COREOS_PUBLIC_IPV4}:${nginxGuestOsPort}:${nginxContainerPort} ${DOCKER_REGISTRY}/${nginxService}:${nginxDockerTag} ${nginxService} -c ${nginxDir}/nginx.conf

# TODO: Figure out how to pass signals from bash to nginx to reload the configuration
#${nginxDir}/startNginx.sh

ExecStopPost=-/usr/bin/docker rm -f ${nginxDockerTag}
ExecStopPost=-/usr/bin/docker ps -a

#Restart=always

[X-Fleet]
Conflicts=${netLocationService}@*.service
Conflicts=${nginxService}@*.service

# nginx and confd must run on the same machine due to limitations of signaling between docker containers. 
# There are more complicated solutions but may not be needed if we go to consul and consul-template
# Postmaster, JMeter, etc. have the nginx IP address hard coded. 

# TODO: This should be ${confdService}@*.service
# Doesn't work: MachineOf=${confdService}@1.service
MachineOf=confd@1.service
