[Unit]
Description=nginx load balancer aka reverse proxy %m %H:%i 

Requires=docker.service
Requires=etcd.service
Requires=confd@*.service

After=docker.service
After=etcd.service
After=confd@*.service

[Service]
# From: https://www.digitalocean.com/community/tutorials/how-to-create-flexible-services-for-a-coreos-cluster-with-fleet-unit-files
# Change killmode from "control-group" to "none" to let Docker remove
# work correctly.
KillMode=none

# Allow access to COREOS_PUBLIC_IPV4 and CORESOS_PRIVATE_IPV4 amongst other variables
EnvironmentFile=/etc/environment
EnvironmentFile=/home/core/share/adNimbusEnvironment

# Pulling the container the first time can take more than the default 90secs. Set to 0 for no timeout
TimeoutStartSec=0

# TODO: Is there a performance startup improvement if we use stop and don't remove the container
# TODO: Can we do a docker run and name the container if we already have it running?

ExecStartPre=-/usr/bin/docker rm -f ${nginxDockerTag}
ExecStartPre=-/usr/bin/docker ps -a
ExecStartPre=/usr/bin/docker pull ${DOCKER_REGISTRY}/${nginxService}:${nginxDockerTag}

ExecStart=/usr/bin/docker run --name=${nginxService} --rm=true --name=${nginxDockerTag} --rm -v /var/run/docker.sock:/var/run/docker.sock -v /home/core/share/${nginxService}:/opt/${nginxService} -p ${COREOS_PUBLIC_IPV4}:${nginxHostPort}:${nginxContainerPort} ${DOCKER_REGISTRY}/${nginxService}:${nginxDockerTag} ${nginxService} -c /opt/nginx/nginx.conf

ExecStopPost=-/usr/bin/docker rm -f ${nginxDockerTag}
ExecStopPost=-/usr/bin/docker ps -a

#Restart=always

[X-Fleet]
Conflicts=${netLocationService}@*.service
Conflicts=${nginxService}@*.service

# TODO: This should be ${confdService}@*.service
MachineOf=confd@1.service
