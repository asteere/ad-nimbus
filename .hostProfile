# Host .profile
# Everything to do with using vagrant and building docker containers

# For foolish consistency use lowercase for function names
function vbm() {
    VBoxManage $*
}

function gvmi() {
    getvminfo $*
}

function v() {
    vagrant $*
}

function vs() {
    vagrant status $*
}

function vstatus() {
    vagrant status $*
}

function vgs() {
    vagrant global-status $*
}

function b2d() {
    boot2docker $*
}

function dps() {
    rundocker ps -a $*
}

function dpsa() {
    rundocker ps -a $*
}

function di() {
    rundocker images $*
}

function d() {
    rundocker $*
}

function vup() {
    cdad
    echo `date`: Creating cluster from Vagrantfile in folder `pwd`
    vagrant up 2>&1 | tee /tmp/vup.log
    date
}

function vsh() {
    vagrant ssh core-0$1
}

function vssh() {
    vsh $1
}

function getlatestcurl() {
    cdad
    cd confd

    # TODO: Figure out how to get latest from github rather than hardcoding this
    curl -L https://github.com/kelseyhightower/confd/releases/download/v0.8.0/confd-0.8.0-linux-amd64 -o confd
    chmod +x confd
}

function buildall() {
    buildconfd
    buildnginx
    buildnetlocation
    buildconsul
    builddevutils
}

function builddevutils() {
    buildcontainer devutils
}

function buildconfd() {
    buildcontainer confd
}

function buildconsul() {
    buildcontainer consul
}

function buildnginx() {
    buildcontainer nginx
}

function buildnetlocation() {
    buildcontainer netlocation
}

function buildcontainer() {
    cdad

    echo Building docker container $1

    # this will result in two repositories $DOCKER_REGISTRY/$1:latest and $1:latest containing collections of images
    rundocker build --tag $DOCKER_REGISTRY/"$1":$1 $1 
    if test ! $? == 0
    then
        return
    fi

    #dlogin 
    if test ! $? == 0
    then
        return
    fi

    rundocker push $DOCKER_REGISTRY/"$1":$1

    cd -

}

function getlistofvms() {
    VBoxManage list vms | awk '{print $1}' | sed 's/"//g'
}

function getvminfo() {
    for vm in  `getlistofvms | grep $1`
    do
        echo 
        echo '********************************************************'
        echo
        echo VM: $vm
        VBoxManage showvminfo $vm
    done 
}

function vdestroy() {
    date
    if test "$1" = ""
    then
        vboxes=`v status | grep -e docker -e virtualbox | awk '{print $1}'`
    else
        vboxes=$1
    fi

    for i in $vboxes
    do 
        v destroy --force $i

        machineDir="$VAGRANT_DOTFILE_PATH/machines/$i"
        if test -d "$machineDir"
        then
            rm -r "$machineDir"
        fi
    done

    # Handle use case where a user destroyed a vm individually and then wanted to destroy all of the vms
    if test "$1" = ""
    then
        rm -rf "$VAGRANT_DOTFILE_PATH"/machines/*
    fi

    vms=`getlistofvms | grep -v boot2docker`
    if test ! "$1" == ""
    then
        vms=`echo $vms | grep $1`
    fi

    for vm in $vms
    do 
        VBoxManage controlvm $vm poweroff 
        VBoxManage unregistervm --delete $vm
    done

    echo
    echo Remaining vms
    getlistofvms

    # See if vagrant has completely cleaned up. Use --prune as sometimes vagrant does completely clean up
    echo
    echo Vagrant global-status '--prune'
    vgs --prune

    # TODO: For some reason, vagrant status reports that the core-0* machines are not created vs reporting nothing
    #echo
    #echo vagrant status
    #vagrant status

    removenginxconftempfiles
    
    date
}

function setupdocker() {
    if test ! "$DOCKER_HOST" == ""
    then
        # boot2docker already setup
        return
    fi

    (which boot2docker) &> /dev/null
    if test "$?" == 0
    then
        b2dstatus=`boot2docker status 2>&1`
        echo boot2docker current status: $b2dstatus
        echo $b2dstatus | grep "machine not exist" 2>&1 > /dev/null
        if test $? == 0
        then
            echo boot2docker init
            boot2docker init
        elif test ! "$b2dstatus" == "running"
        then
            echo boot2docker up
            boot2docker up
        fi
        $(boot2docker shellinit)
    fi
}

function rundocker() {
    setupdocker

    docker $*
}

function dlogin() {
    docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PWD
}

function checkhostnetlocation() {
    if test "$1" == ""
    then
        coreosNginxPorts=`grep $nginxGuestOsPort /tmp/vup.log | grep "adapter 1" | awk '{print $4}'`
        hostIpAddr=`ip addr | grep 'inet ' | grep -v -e 127.0 -e 172.17 | sed -e 's/.*inet //' -e 's/\/.*//'`
    else
        coreosNginxPorts=`grep $2 /tmp/vup.log | grep "adapter 1" | awk '{print $4}'`
        hostIpAddr=$1
    fi

    for anIpAddr in localhost $hostIpAddr
    do
        for port in $coreosNginxPorts
        do
            checknetlocation $anIpAddr $port
            echo
        done
    done
}

if test "$VAGRANT_CWD" == ""
then
    echo This .profile assumes that VAGRANT_CWD has been exported and set it to your ad-nimbus folder on the host machine. 
    echo If VAGRANT_CWD is set, things like fleetctl status 'netlocation@1.service' will work. Thanks.
    echo For example:
    echo '    export VAGRANT_CWD=~/Research/asteere/ad-nimbus'
    echo Exiting.
    return
fi

if test ! -d "$VAGRANT_CWD"
then
    echo The environment variable "$VAGRANT_CWD" does not point to a valid folder, please set VAGRANT_CWD to your ad-nimbus folder and resource this .profile
    echo export VAGRANT_CWD=$VAGRANT_CWD
    echo Exiting.
    return
else
    export AD_NIMBUS_DIR=$VAGRANT_CWD
fi

maxMindFolder="$AD_NIMBUS_DIR/netlocation/src/data/maxMind"
for dataFile in GeoIP2-City.mmdb  GeoIP2-ISP.mmdb
do
    if test ! -f "$maxMindFolder/$dataFile" 
    then
        echo Error: Missing file $maxMindFolder/$dataFile.
        echo One or more of the MaxMind data files are missing from folder $maxMindFolder. 
        echo Ask someone on the ArchTech team for the files.
        return
    fi
done

if test "$DOCKER_REGISTRY" == ""
then
    echo Please set and export DOCKER_REGISTRY in your ~/.profile to the docker registry you want to use '(asteere, mark-larter, localhost:5000, etc.)'.
    echo Exiting
    return
fi

if test "$DOCKER_USER" == ""
then
    echo Please set and export DOCKER_USER in your ~/.profile to the docker registry user you want to use '(asteere, mark-larter, etc.)'.
    echo Exiting.
    return
fi

# User's .profile or .bash_profile set up correctly, time to get to work

export VAGRANT_HOME="$AD_NIMBUS_DIR/.vagrant.d"
export VAGRANT_DOTFILE_PATH="$AD_NIMBUS_DIR/.vagrant"

# Pull in the common functions, etc.
. "$AD_NIMBUS_DIR"/.sharedProfile

cdad

#updateadnimbusenvironment

# Make vagrant's key accessible to coreos 
vagrantInsecureKey=insecure_private_key
if test -f "$VAGRANT_HOME"/insecure_private_key
then
    cp "$VAGRANT_HOME"/insecure_private_key .
fi


