# CoreOS .profile
# Currently, this file is sourced by monitor.sh. When run as part of a service things like '~' are not defined. Always use the full path.

# Aliases go first so they can be used by the functions
alias d='docker'
alias dps='docker ps -a'
alias dpsa='docker ps -a'
alias di='docker images'

alias f='fleetctl --strict-host-key-checking=false'
alias flm='fleetctl list-machines -l'
alias flu='fleetctl list-units'
alias fluf='fleetctl list-unit-files'
alias ftunnel='fleetctl --tunnel 10.10.10.10'
alias ssh='ssh -oStrictHostKeyChecking=no'

# Foolish consistency sake, functions are lower case
function dockerbash() {
    cdad
    echo NFS share $AD_NIMBUS_DIR will be located on /opt/share
    docker run -v /home/core/share:/opt/share -it asteere/devutils:devutils /bin/bash 
}

function fstartnetlocation() {
    numNetLocationInstances=1
    fstartservice netlocation $numNetLocationInstances
}

function etctree() { 
    # TODO: get the key from adNimbusEnvironment, shouldn't be hardcoded
    for key in `etcdctl ls -recursive ${netLocationKey}`
    do
        echo -n $key=
        etcdctl get $key
    done
}

function fjournal() {
    f journal $*
}

function fstartnginx() {
    fstartservice nginx 1
}

function fstartconfd() {
    fstartservice confd 1
}

function fstartconsul() {
    fstartservice consul $numInstances
}

#TODO: Remove once the cutover to consul health-checks and handling is complete
#function fstartmon() {
#    fstartservice monitor 1
#}

function frestartservice() {
    svc=$1
    svcInstances=`flu -fields=unit | grep $svc`

    fdestroy $svcInstances

    fstartservice $svc $numServices

    if test "$2" == ""
    then
        numInstances=`echo $svcInstances | wc -w`
    else
        numInstances=$2
    fi
    for i in $svcInstances
    do
        fjournal -f $i
    done
}

function fstartservice() {
    service=$1
    numServices=$2
    if test "$2" == ""
    then
        numServices=1
    fi

    cd $AD_NIMBUS_DIR/$service

    echo Be patient, this can take awhile before you get the first service \"$service\" output for a total of $numServices 'service(s)'

    case $numServices in
    0)
        fleetctl start ${service}.service
	;;

    1)
        fleetctl start ${service}@1.service
	;;
    *)
        serviceRange='${service}@{1..'$numServices'}.service'
        fleetctl start `eval echo $serviceRange`
	;;
    esac

    cd - > /dev/null

}

function fstartall() {
    fdestroy

    removeNginxConfTempFiles

    drmf

    # The first time confd & nginx runs there will be no nginx.conf. Test this use case when starting all services
    rm -f $AD_NIMBUS_DIR/nginx/nginx.conf

    fstartconsul
    fstartconfd
    fstartnetlocation
    sleep 5

    # TOOD: nginx will fail if the nginx.conf isn't there. Does it ever recover if confd creates it later?
    fstartnginx
    sleep 3
    #fstartmon
    fluf
    echo
    flu
}

function fstatusall() {
    runningServices=`fluf -fields=unit | grep -v UNIT`
    if test "$runningServices" = ""
    then
        echo No ad-nimbus services running
        return
    fi

    echo Fetching status on $runningServices
    while true
    do
        echo '+++++++++++++++ Next round of services +++++++++' 
        for service in $runningServices
        do 
            echo $service 
            f status $service 
            echo
            echo 
            echo Hit enter for next service.
            read a 
            echo; 
            echo '==============' 
        done
    done
}

function fstatusnetlocationservices() {
    while true 
    do 
        runningServices=`fluf | grep 'launched.*launched' | grep netlocation | awk '{print $1}'`
        if test "$runningServices" = ""
        then
            echo No ad-nimbus netlocation services running
            return
        fi

        echo '============================='; 
        for service in $runningServices
        do 
            echo $service
            f journal -lines=5 $service
            echo
            echo
            echo Hit enter for next service.
            read a
        done
    done
}

function fstatus() {
    f status $1
}

function fdestroy() {
    if test "$1" = ""
    then
        svcs=$(fleetctl list-unit-files | awk '{print $1}')
    else
        svcs=$*
    fi

    fleetctl destroy $svcs

    fleetctl list-unit-files
}

function drmf() {
    ipRoot=172.17.8

    # Remove the raptor docker containers from each coreos. On clean shutdown or first time startup
    # there are no docker containers to remove
    instanceRange={1..$numInstances}
    for i in `eval echo $instanceRange`
    do 
        ipAddr=${ipRoot}.10$i
        dImages=`ssh -oStrictHostKeyChecking=no $ipAddr docker ps -a 2>&1 | \
            grep -v -e 'list of known hosts' -e NAME | \
            awk '{print $NF}'`

        if test ! "$dImages" == ""
        then
            echo Removing docker images $dImages on $ipAddr
            ssh -oStrictHostKeyChecking=no $ipAddr docker rm -f $dImages 
        fi
    done
}

function rundockerbash() {
    # Run the lightest container we have. Useful for seeing what commands are available, what the folder 
    # hierarchy is, testing different options like -v, etc.
    docker run -it -v /home/core/share:/usr/share asteere/consul:consul bash
}

if test -d "/home/core/share"
then
    AD_NIMBUS_DIR=/home/core/share

    . "$AD_NIMBUS_DIR"/.sharedProfile

    cdad
fi

if test -x "$AD_NIMBUS_DIR/devutils/jq"
then
    function jq() {
        if test "$1" == ""
        then
            $AD_NIMBUS_DIR/devutils/jq .
        else
            $AD_NIMBUS_DIR/devutils/jq $*
        fi
    }
fi

ssh-add -L | grep insecure_private_key 2>&1 > /dev/null
if test ! $? == 0
then
    ssh-add insecure_private_key
fi

# Setup fleetctl status
if test "$SSH_AUTH_SOCK" == ""
then
    eval $(ssh-agent)
fi

export VIMINIT='set ic number tabstop=4 shiftwidth=4 expandtab noai nocin nosi inde=<CR> fileformat=unix'
export numInstances=`grep '$num_instances=' config.rb | sed 's/.*=//'`

set -a 
. /etc/environment
set +a
